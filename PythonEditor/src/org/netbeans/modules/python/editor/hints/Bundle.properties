# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Category descriptions in the Options Panel
gsf-hints/text/x-python/hints/general=General

# NameRule
NameRule=Naming Conventions
NameRuleDesc=Check class, function and variable names for style guide compliance (see http://www.python.org/dev/peps/pep-0008/ for rules)
NameRuleWrongNoArg=First argument should be 'self' or 'cls'
NameRuleWrongArg=First argument ({0}) should be 'self' or 'cls'
WrongStyle=Name "{0}" is not a valid {1} name according to your code style ({2})
Module=module
Function=function
Class=class
Variable=variable
ChangeStyle=Change preferred {0} name style to {1}
ChangeNoStyle=Turn off {0} name style checks
IgnoreWord=Ignore name violations for "{0}"
NameRulePrefs.selfCb.text=First method params should be "self" or "cls"
NameRulePrefs.moduleLabel.text=Modules:
NameRulePrefs.classLabel.text=Classes:
NameRulePrefs.functionLabel.text=Functions:
NameRulePrefs.parameterLabel.text=Parameters:
NameRulePrefs.variableLabel.text=Variables:
NoPreference=No Preference
NameRulePrefs.ignoreLabel.text=Ignored:

CreateDocString=Create document comment
CreateDocStringDesc=Offer to create a documentation comment for the current function, class or module
CreateDocStringFix=Add a one-liner docstring
CreateDocStringFixMulti=Add a multi-line docstring

AssignToVariable=Assign expression to a variable
AssignToVariableDesc=Assign expression under the caret to a variable
AssignToVariableFix=Assign expression to a variable
VarName=name

SplitImports=Multiple imports per import statement is discouraged
SplitImportsDesc=Split an import which imports multiple modules into individual import statements as recommended by the Python styleguide
SplitImportsFix=Split import into individual import statements

RelativeImports=Relative imports for intra-package imports are actively discouraged (as per PEP-008)
RelativeImportsDesc=Relative imports for intra-package imports are actively discouraged (as per PEP-008) and this rule warns about usages of relative imports
RelativeImportsFix=Replace with absolute import

Deprecations=Deprecated
DeprecationsMsg={0} is deprecated
DeprecationsMsgDetail={0} is deprecated. {1}
DeprecationsDesc=Check for deprecated modules

SurroundWith=Surround With...
#SurroundWithDesc=Offer to surround selected code with try/catch, etc
SurroundWithTE=Surround With Try/Except
SurroundWithTEF=Surround With Try/Except/Finally
SurroundWithTF=Surround With Try/Finally
InsertSelf=Insert a new first parameter "self"
RenameSelf=Rename first parameter "{0}" to self

ExtractCode=Extract Code
IntroduceMethod=Extract Method
IntroduceVariable=Introduce Variable
IntroduceConstant=Introduce Constant
IntroduceField=Introduce Field

UnusedImport=Unused Import
UnusedImportSymbols=Some symbols are unused ({0})
UnusedImports=Find Unused Imports
UnusedImportsDesc=Find imports that aren't used in this module and can be removed
UnusedFix=Remove Unused Import
UnusedFixSymbols=Remove {0} from import
OrganizeImports=Clean up and Organize Imports
DeleteAllUnused=Remove All Unused Imports

Unused=Find Unused Variables
UnusedDesc=Find variables that are defined but never used
UnusedVariable=Unused Variable {0}

Unresolved=Find Undefined Names
UnresolvedDesc=Find names that are used but have not been bound
UnresolvedVariable=Undefined name "{0}"
UnresolvedVariableMaybe=Undefined name "{0}" - did you mean "{1}" ?
FixImport=Import {0}

UnresolvedAttributes=Find Unresolved classes attributes and parentages
UnresolvedAttributesDesc=Find class attributes that are used but have not been bound and undefined inherited classes
UnresolvedAttributesVariable=Undefined attribute "{0}"
UnresolvedInheritanceVariable=Inheriting from undefined parent class "{0}"

AccessProtected=Access Protected Attributes
AccessProtectedDesc=Find access to protected variables/methods of non parent classes
AccessProtectedVariable=Access to protected variable "{0}"

AttributeDefinedOutsideInit=Attribute Defined Outside __init__
AttributeDefinedOutsideInitDesc=Class Attribute defined outside __init__ constructor
AttributeDefinedOutsideInitVariable=Attribute Defined Outside __init__ "{0}"

ClassCircularRedundancy=Parent Child circular redundancy
ClassCircularRedundancyDesc=Parent Child circular redundancy = A inherits B and B inherits A
ClassCircularRedundancyVariable=Parent/child {0} inheritance circular redundancy

AllAssignExists=Symbol defined in __all__ does not exist
AllAssignExistsDesc=Checks that all symbols listed in __all__ actually exist
AllAssignExistsMsg="{0}" defined in __all__ does not exist!
UnusedDetectorPrefs.skipParams.text=Ignore unused function parameters
UnusedDetectorPrefs.ignoredLabel.text=Ignored names:
UnusedDetectorPrefs.skipTupleAssignments.text=Ignore unused variables in tuple-assignments
